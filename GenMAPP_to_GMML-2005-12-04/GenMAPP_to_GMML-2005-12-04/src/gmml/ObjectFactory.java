//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v1.0.5-b16-fcs 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2005.10.19 at 03:49:42 PM CEST 
//


package gmml;


/**
 * This object contains factory methods for each 
 * Java content interface and Java element interface 
 * generated in the gmml package. 
 * <p>An ObjectFactory allows you to programatically 
 * construct new instances of the Java representation 
 * for XML content. The Java representation of XML 
 * content can consist of schema derived interfaces 
 * and classes representing the binding of schema 
 * type definitions, element declarations and model 
 * groups.  Factory methods for each of these are 
 * provided in this class.
 * 
 */
public class ObjectFactory
    extends gmml.impl.runtime.DefaultJAXBContextImpl
{

    private static java.util.HashMap defaultImplementations = new java.util.HashMap(48, 0.75F);
    private static java.util.HashMap rootTagMap = new java.util.HashMap();
    public final static gmml.impl.runtime.GrammarInfo grammarInfo = new gmml.impl.runtime.GrammarInfoImpl(rootTagMap, defaultImplementations, (gmml.ObjectFactory.class));
    public final static java.lang.Class version = (gmml.impl.JAXBVersion.class);

    static {
        defaultImplementations.put((gmml.CellShapeType.GraphicsType.class), "gmml.impl.CellShapeTypeImpl.GraphicsTypeImpl");
        defaultImplementations.put((gmml.PathwayType.GraphicsType.class), "gmml.impl.PathwayTypeImpl.GraphicsTypeImpl");
        defaultImplementations.put((gmml.CellComponentShape.class), "gmml.impl.CellComponentShapeImpl");
        defaultImplementations.put((gmml.CellComponentShapeType.GraphicsType.class), "gmml.impl.CellComponentShapeTypeImpl.GraphicsTypeImpl");
        defaultImplementations.put((gmml.LineShape.class), "gmml.impl.LineShapeImpl");
        defaultImplementations.put((gmml.CellShape.class), "gmml.impl.CellShapeImpl");
        defaultImplementations.put((gmml.ProteinComplexShapeType.class), "gmml.impl.ProteinComplexShapeTypeImpl");
        defaultImplementations.put((gmml.BraceType.class), "gmml.impl.BraceTypeImpl");
        defaultImplementations.put((gmml.GeneProductType.GraphicsType.class), "gmml.impl.GeneProductTypeImpl.GraphicsTypeImpl");
        defaultImplementations.put((gmml.LineType.GraphicsType.class), "gmml.impl.LineTypeImpl.GraphicsTypeImpl");
        defaultImplementations.put((gmml.LineType.class), "gmml.impl.LineTypeImpl");
        defaultImplementations.put((gmml.PathwayType.class), "gmml.impl.PathwayTypeImpl");
        defaultImplementations.put((gmml.ArcType.class), "gmml.impl.ArcTypeImpl");
        defaultImplementations.put((gmml.LineShapeType.class), "gmml.impl.LineShapeTypeImpl");
        defaultImplementations.put((gmml.GeneProductType.class), "gmml.impl.GeneProductTypeImpl");
        defaultImplementations.put((gmml.LineShapeType.GraphicsType.class), "gmml.impl.LineShapeTypeImpl.GraphicsTypeImpl");
        defaultImplementations.put((gmml.GeneProduct.class), "gmml.impl.GeneProductImpl");
        defaultImplementations.put((gmml.BaseElement.class), "gmml.impl.BaseElementImpl");
        defaultImplementations.put((gmml.ShapeType.class), "gmml.impl.ShapeTypeImpl");
        defaultImplementations.put((gmml.Arc.class), "gmml.impl.ArcImpl");
        defaultImplementations.put((gmml.BraceType.GraphicsType.class), "gmml.impl.BraceTypeImpl.GraphicsTypeImpl");
        defaultImplementations.put((gmml.Pathway.class), "gmml.impl.PathwayImpl");
        defaultImplementations.put((gmml.NamedBaseElement.class), "gmml.impl.NamedBaseElementImpl");
        defaultImplementations.put((gmml.Shape.class), "gmml.impl.ShapeImpl");
        defaultImplementations.put((gmml.ProteinComplexShape.class), "gmml.impl.ProteinComplexShapeImpl");
        defaultImplementations.put((gmml.CellShapeType.class), "gmml.impl.CellShapeTypeImpl");
        defaultImplementations.put((gmml.Brace.class), "gmml.impl.BraceImpl");
        defaultImplementations.put((gmml.Line.class), "gmml.impl.LineImpl");
        defaultImplementations.put((gmml.LabelType.GraphicsType.class), "gmml.impl.LabelTypeImpl.GraphicsTypeImpl");
        defaultImplementations.put((gmml.ShapeType.GraphicsType.class), "gmml.impl.ShapeTypeImpl.GraphicsTypeImpl");
        defaultImplementations.put((gmml.CellComponentShapeType.class), "gmml.impl.CellComponentShapeTypeImpl");
        defaultImplementations.put((gmml.ProteinComplexShapeType.GraphicsType.class), "gmml.impl.ProteinComplexShapeTypeImpl.GraphicsTypeImpl");
        defaultImplementations.put((gmml.Label.class), "gmml.impl.LabelImpl");
        defaultImplementations.put((gmml.LabelType.class), "gmml.impl.LabelTypeImpl");
        defaultImplementations.put((gmml.ArcType.GraphicsType.class), "gmml.impl.ArcTypeImpl.GraphicsTypeImpl");
        rootTagMap.put(new javax.xml.namespace.QName("", "LineShape"), (gmml.LineShape.class));
        rootTagMap.put(new javax.xml.namespace.QName("", "Pathway"), (gmml.Pathway.class));
        rootTagMap.put(new javax.xml.namespace.QName("", "Line"), (gmml.Line.class));
        rootTagMap.put(new javax.xml.namespace.QName("", "CellComponentShape"), (gmml.CellComponentShape.class));
        rootTagMap.put(new javax.xml.namespace.QName("", "CellShape"), (gmml.CellShape.class));
        rootTagMap.put(new javax.xml.namespace.QName("", "ProteinComplexShape"), (gmml.ProteinComplexShape.class));
        rootTagMap.put(new javax.xml.namespace.QName("", "Brace"), (gmml.Brace.class));
        rootTagMap.put(new javax.xml.namespace.QName("", "GeneProduct"), (gmml.GeneProduct.class));
        rootTagMap.put(new javax.xml.namespace.QName("", "Label"), (gmml.Label.class));
        rootTagMap.put(new javax.xml.namespace.QName("", "Arc"), (gmml.Arc.class));
        rootTagMap.put(new javax.xml.namespace.QName("", "Shape"), (gmml.Shape.class));
    }

    /**
     * Create a new ObjectFactory that can be used to create new instances of schema derived classes for package: gmml
     * 
     */
    public ObjectFactory() {
        super(grammarInfo);
    }

    /**
     * Create an instance of the specified Java content interface.
     * 
     * @param javaContentInterface
     *     the Class object of the javacontent interface to instantiate
     * @return
     *     a new instance
     * @throws JAXBException
     *     if an error occurs
     */
    public java.lang.Object newInstance(java.lang.Class javaContentInterface)
        throws javax.xml.bind.JAXBException
    {
        return super.newInstance(javaContentInterface);
    }

    /**
     * Get the specified property. This method can only be
     * used to get provider specific properties.
     * Attempting to get an undefined property will result
     * in a PropertyException being thrown.
     * 
     * @param name
     *     the name of the property to retrieve
     * @return
     *     the value of the requested property
     * @throws PropertyException
     *     when there is an error retrieving the given property or value
     */
    public java.lang.Object getProperty(java.lang.String name)
        throws javax.xml.bind.PropertyException
    {
        return super.getProperty(name);
    }

    /**
     * Set the specified property. This method can only be
     * used to set provider specific properties.
     * Attempting to set an undefined property will result
     * in a PropertyException being thrown.
     * 
     * @param value
     *     the value of the property to be set
     * @param name
     *     the name of the property to retrieve
     * @throws PropertyException
     *     when there is an error processing the given property or value
     */
    public void setProperty(java.lang.String name, java.lang.Object value)
        throws javax.xml.bind.PropertyException
    {
        super.setProperty(name, value);
    }

    /**
     * Create an instance of CellShapeTypeGraphicsType
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public gmml.CellShapeType.GraphicsType createCellShapeTypeGraphicsType()
        throws javax.xml.bind.JAXBException
    {
        return new gmml.impl.CellShapeTypeImpl.GraphicsTypeImpl();
    }

    /**
     * Create an instance of PathwayTypeGraphicsType
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public gmml.PathwayType.GraphicsType createPathwayTypeGraphicsType()
        throws javax.xml.bind.JAXBException
    {
        return new gmml.impl.PathwayTypeImpl.GraphicsTypeImpl();
    }

    /**
     * Create an instance of CellComponentShape
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public gmml.CellComponentShape createCellComponentShape()
        throws javax.xml.bind.JAXBException
    {
        return new gmml.impl.CellComponentShapeImpl();
    }

    /**
     * Create an instance of CellComponentShapeTypeGraphicsType
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public gmml.CellComponentShapeType.GraphicsType createCellComponentShapeTypeGraphicsType()
        throws javax.xml.bind.JAXBException
    {
        return new gmml.impl.CellComponentShapeTypeImpl.GraphicsTypeImpl();
    }

    /**
     * Create an instance of LineShape
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public gmml.LineShape createLineShape()
        throws javax.xml.bind.JAXBException
    {
        return new gmml.impl.LineShapeImpl();
    }

    /**
     * Create an instance of CellShape
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public gmml.CellShape createCellShape()
        throws javax.xml.bind.JAXBException
    {
        return new gmml.impl.CellShapeImpl();
    }

    /**
     * Create an instance of ProteinComplexShapeType
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public gmml.ProteinComplexShapeType createProteinComplexShapeType()
        throws javax.xml.bind.JAXBException
    {
        return new gmml.impl.ProteinComplexShapeTypeImpl();
    }

    /**
     * Create an instance of BraceType
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public gmml.BraceType createBraceType()
        throws javax.xml.bind.JAXBException
    {
        return new gmml.impl.BraceTypeImpl();
    }

    /**
     * Create an instance of GeneProductTypeGraphicsType
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public gmml.GeneProductType.GraphicsType createGeneProductTypeGraphicsType()
        throws javax.xml.bind.JAXBException
    {
        return new gmml.impl.GeneProductTypeImpl.GraphicsTypeImpl();
    }

    /**
     * Create an instance of LineTypeGraphicsType
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public gmml.LineType.GraphicsType createLineTypeGraphicsType()
        throws javax.xml.bind.JAXBException
    {
        return new gmml.impl.LineTypeImpl.GraphicsTypeImpl();
    }

    /**
     * Create an instance of LineType
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public gmml.LineType createLineType()
        throws javax.xml.bind.JAXBException
    {
        return new gmml.impl.LineTypeImpl();
    }

    /**
     * Create an instance of PathwayType
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public gmml.PathwayType createPathwayType()
        throws javax.xml.bind.JAXBException
    {
        return new gmml.impl.PathwayTypeImpl();
    }

    /**
     * Create an instance of ArcType
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public gmml.ArcType createArcType()
        throws javax.xml.bind.JAXBException
    {
        return new gmml.impl.ArcTypeImpl();
    }

    /**
     * Create an instance of LineShapeType
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public gmml.LineShapeType createLineShapeType()
        throws javax.xml.bind.JAXBException
    {
        return new gmml.impl.LineShapeTypeImpl();
    }

    /**
     * Create an instance of GeneProductType
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public gmml.GeneProductType createGeneProductType()
        throws javax.xml.bind.JAXBException
    {
        return new gmml.impl.GeneProductTypeImpl();
    }

    /**
     * Create an instance of LineShapeTypeGraphicsType
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public gmml.LineShapeType.GraphicsType createLineShapeTypeGraphicsType()
        throws javax.xml.bind.JAXBException
    {
        return new gmml.impl.LineShapeTypeImpl.GraphicsTypeImpl();
    }

    /**
     * Create an instance of GeneProduct
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public gmml.GeneProduct createGeneProduct()
        throws javax.xml.bind.JAXBException
    {
        return new gmml.impl.GeneProductImpl();
    }

    /**
     * Create an instance of BaseElement
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public gmml.BaseElement createBaseElement()
        throws javax.xml.bind.JAXBException
    {
        return new gmml.impl.BaseElementImpl();
    }

    /**
     * Create an instance of ShapeType
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public gmml.ShapeType createShapeType()
        throws javax.xml.bind.JAXBException
    {
        return new gmml.impl.ShapeTypeImpl();
    }

    /**
     * Create an instance of Arc
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public gmml.Arc createArc()
        throws javax.xml.bind.JAXBException
    {
        return new gmml.impl.ArcImpl();
    }

    /**
     * Create an instance of BraceTypeGraphicsType
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public gmml.BraceType.GraphicsType createBraceTypeGraphicsType()
        throws javax.xml.bind.JAXBException
    {
        return new gmml.impl.BraceTypeImpl.GraphicsTypeImpl();
    }

    /**
     * Create an instance of Pathway
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public gmml.Pathway createPathway()
        throws javax.xml.bind.JAXBException
    {
        return new gmml.impl.PathwayImpl();
    }

    /**
     * Create an instance of NamedBaseElement
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public gmml.NamedBaseElement createNamedBaseElement()
        throws javax.xml.bind.JAXBException
    {
        return new gmml.impl.NamedBaseElementImpl();
    }

    /**
     * Create an instance of Shape
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public gmml.Shape createShape()
        throws javax.xml.bind.JAXBException
    {
        return new gmml.impl.ShapeImpl();
    }

    /**
     * Create an instance of ProteinComplexShape
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public gmml.ProteinComplexShape createProteinComplexShape()
        throws javax.xml.bind.JAXBException
    {
        return new gmml.impl.ProteinComplexShapeImpl();
    }

    /**
     * Create an instance of CellShapeType
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public gmml.CellShapeType createCellShapeType()
        throws javax.xml.bind.JAXBException
    {
        return new gmml.impl.CellShapeTypeImpl();
    }

    /**
     * Create an instance of Brace
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public gmml.Brace createBrace()
        throws javax.xml.bind.JAXBException
    {
        return new gmml.impl.BraceImpl();
    }

    /**
     * Create an instance of Line
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public gmml.Line createLine()
        throws javax.xml.bind.JAXBException
    {
        return new gmml.impl.LineImpl();
    }

    /**
     * Create an instance of LabelTypeGraphicsType
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public gmml.LabelType.GraphicsType createLabelTypeGraphicsType()
        throws javax.xml.bind.JAXBException
    {
        return new gmml.impl.LabelTypeImpl.GraphicsTypeImpl();
    }

    /**
     * Create an instance of ShapeTypeGraphicsType
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public gmml.ShapeType.GraphicsType createShapeTypeGraphicsType()
        throws javax.xml.bind.JAXBException
    {
        return new gmml.impl.ShapeTypeImpl.GraphicsTypeImpl();
    }

    /**
     * Create an instance of CellComponentShapeType
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public gmml.CellComponentShapeType createCellComponentShapeType()
        throws javax.xml.bind.JAXBException
    {
        return new gmml.impl.CellComponentShapeTypeImpl();
    }

    /**
     * Create an instance of ProteinComplexShapeTypeGraphicsType
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public gmml.ProteinComplexShapeType.GraphicsType createProteinComplexShapeTypeGraphicsType()
        throws javax.xml.bind.JAXBException
    {
        return new gmml.impl.ProteinComplexShapeTypeImpl.GraphicsTypeImpl();
    }

    /**
     * Create an instance of Label
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public gmml.Label createLabel()
        throws javax.xml.bind.JAXBException
    {
        return new gmml.impl.LabelImpl();
    }

    /**
     * Create an instance of LabelType
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public gmml.LabelType createLabelType()
        throws javax.xml.bind.JAXBException
    {
        return new gmml.impl.LabelTypeImpl();
    }

    /**
     * Create an instance of ArcTypeGraphicsType
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public gmml.ArcType.GraphicsType createArcTypeGraphicsType()
        throws javax.xml.bind.JAXBException
    {
        return new gmml.impl.ArcTypeImpl.GraphicsTypeImpl();
    }

}
