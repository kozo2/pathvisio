// PathVisio,
// a tool for data visualization and analysis using Biological Pathways
// Copyright 2006-2009 BiGCaT Bioinformatics
//
// Licensed under the Apache License, Version 2.0 (the "License"); 
// you may not use this file except in compliance with the License. 
// You may obtain a copy of the License at 
// 
// http://www.apache.org/licenses/LICENSE-2.0 
//  
// Unless required by applicable law or agreed to in writing, software 
// distributed under the License is distributed on an "AS IS" BASIS, 
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. 
// See the License for the specific language governing permissions and 
// limitations under the License.
//

package org.pathvisio.cytoscape.superpathways;

import java.awt.Cursor;
import java.rmi.RemoteException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Set;

import javax.swing.DefaultComboBoxModel;
import javax.swing.DefaultListModel;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.ListSelectionModel;
import javax.swing.table.DefaultTableModel;

import org.bridgedb.bio.Organism;
import org.pathvisio.cytoscape.superpathways.SuperpathwaysClient.FindPathwaysByTextParameters;
import org.pathvisio.cytoscape.superpathways.SuperpathwaysClient.GetPathwayParameters;
import org.pathvisio.debug.Logger;
import org.pathvisio.model.ConverterException;
import org.pathvisio.model.ObjectType;
import org.pathvisio.model.Pathway;
import org.pathvisio.model.PathwayElement;
import org.pathvisio.util.swing.ListWithPropertiesTableModel;
import org.pathvisio.util.swing.RowWithProperties;
import org.pathvisio.wikipathways.WikiPathwaysClient;
import org.pathvisio.wikipathways.webservice.WSPathway;
import org.pathvisio.wikipathways.webservice.WSSearchResult;

import cytoscape.data.webservice.CyWebServiceEvent;
import cytoscape.data.webservice.CyWebServiceException;
import cytoscape.data.webservice.WebServiceClientManager;
import cytoscape.data.webservice.CyWebServiceEvent.WSEventType;

import org.jdesktop.layout.GroupLayout;

//public class SuperpathwaysGui extends JFrame implements ActionListener{ 
public class SuperpathwaysGui extends JPanel { // JTabbedPane{// JFrame { //

	private static String ACTION_SEARCH = "Search";

	private static String ORGANISM_ALL = "All organisms";

	final SuperpathwaysClient mClient;

	ResultRow mSelected;
	
	ResultRow mSelectedInHelpPanel;

	String mClickedPathwayName = "not defined";

	String mSelectedPathwayName = "undefined";
	
	String mSelectedPwInHelpPanel= "undefined";

	private List<String> mAvailablePathwaysNameIDList = new ArrayList<String>();

	private List<ResultRow> mAvailablePathwaysList = new ArrayList<ResultRow>();

	private List<String> mCandidatePwList = new ArrayList<String>();

	private Map<String, WSSearchResult[]> mNodeIdToPwsSharingNode = new HashMap<String, WSSearchResult[]>();

	public SuperpathwaysGui(SuperpathwaysClient c) {
		// frame = this;
		// this.setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);

		mClient = c;

		initComponents();

	}

	// the following code is generated in Netbean IDE
	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
	// <editor-fold defaultstate="collapsed" desc="Generated Code">
	private void initComponents() {

		superpathwayPanel = new javax.swing.JTabbedPane();
		searchPane = new javax.swing.JPanel();
		stepLabel1 = new javax.swing.JLabel();
		searchText = new javax.swing.JTextField();
		organismCombo = new javax.swing.JComboBox();
		searchBtn = new javax.swing.JButton();
		helpButton = new javax.swing.JButton();
		hintLabel1 = new javax.swing.JLabel();
		resultScrolllPane1 = new javax.swing.JScrollPane();
		resultTable = new javax.swing.JTable();
		addBtn = new javax.swing.JButton();
		selectPanel = new javax.swing.JPanel();
		availablePathwaysScrollPane = new javax.swing.JScrollPane();
		availablePathwaysList = new javax.swing.JList();
		availablePathwaysListModel = new DefaultListModel();
		availablePathwaysLabel = new javax.swing.JLabel();
		selectedPathwaysLabel = new javax.swing.JLabel();

		selectedPathwaysScrollPane = new javax.swing.JScrollPane();
		selectedPathwaysList = new javax.swing.JList();
		selectedPathwaysListModel = new DefaultListModel();

		openBtn = new javax.swing.JButton();
		rightButton = new javax.swing.JButton();
		leftButton = new javax.swing.JButton();

		CancelBtn = new javax.swing.JButton();
		MergeBtn = new javax.swing.JButton();

		layoutPane = new javax.swing.JPanel();
		stepLabel2 = new javax.swing.JLabel();
		jRadioButton1 = new javax.swing.JRadioButton();
		jRadioButton2 = new javax.swing.JRadioButton();
		jRadioButton3 = new javax.swing.JRadioButton();
		jRadioButton4 = new javax.swing.JRadioButton();
		jRadioButton5 = new javax.swing.JRadioButton();
		jRadioButton6 = new javax.swing.JRadioButton();

		helpPanel = new javax.swing.JPanel();
		anchorPathwayLabel = new javax.swing.JLabel();
		sharingNodeNoLabel = new javax.swing.JLabel();
		anchorPathwayComboBox = new javax.swing.JComboBox();
		lowerBoundSharingNodeNoComboBox = new javax.swing.JComboBox();
		candidatePathwaysSharingNodesScrollPane = new javax.swing.JScrollPane();
		//candidatePathwaysSharingNodesScrollPane = new javax.swing.JScrollPane();

		candidatePathwaysSharingNodesList = new javax.swing.JList();
		candidatePathwaysSharingNodesListModel = new DefaultListModel();

		//candidatePathwaysSharingNodesTable = new javax.swing.JTable();
		//candidatePathwaysSharingNodesTableModel = new javax.swing.table.DefaultTableModel();
		
		//candidatePathwaysSharingNodesTableModel.addColumn("Pathway Name (ID)");
		//candidatePathwaysSharingNodesTableModel.addColumn("Sharing Node Number");

		explainHelpLabel1 = new javax.swing.JLabel();
		addHelpButton = new javax.swing.JButton();
		lowerBoundLabel = new javax.swing.JLabel();
		upperBoundLabel = new javax.swing.JLabel();
		upperBoundSharingNodeNoComboBox = new javax.swing.JComboBox();
		explainHelpLabel2 = new javax.swing.JLabel();
		backToSearchButton = new javax.swing.JButton();
		searchHelpButton = new javax.swing.JButton();

		// setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
		// setTitle("Superpathways");
		// setBackground(new java.awt.Color(255, 255, 255));

		superpathwayPanel.setToolTipText("");
		superpathwayPanel.setName("search_select_tab"); // NOI18N

		searchPane.setToolTipText("");

		stepLabel1.setBackground(new java.awt.Color(204, 204, 255));
		stepLabel1.setFont(new java.awt.Font("Dialog", 1, 11)); // NOI18N
		stepLabel1.setForeground(new java.awt.Color(102, 0, 0));
		stepLabel1
				.setText("Step 1: Search and select multiple pathways from WikiPathways");

		searchText.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				searchTextActionPerformed(evt);
			}
		});

		resetOrganisms();

		searchBtn.setText("Search");
		searchBtn.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				searchBtnActionPerformed(evt);
			}
		});

		hintLabel1.setFont(new java.awt.Font("Dialog", 1, 11)); // NOI18N
		hintLabel1
				.setText("You can search by: pathway name, gene/protein name, or any page content");

		resultTable.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

		resultTable.addMouseListener(new java.awt.event.MouseAdapter() {
			public void mouseClicked(java.awt.event.MouseEvent e) {
				if (e.getClickCount() == 1) {
					int row = resultTable.getSelectedRow();
					mSelected = tableModel.getRow(row);
					mClickedPathwayName = mSelected
							.getProperty(ResultProperty.NAME)
							+ "("
							+ mSelected.getProperty(ResultProperty.ID)
							+ ")";

					System.out.println(mClickedPathwayName);
					// openNetwork(mSelected);
				}
			}
		});

		resultScrolllPane1.setViewportView(resultTable);

		addBtn.setText("Add");
		addBtn
				.setToolTipText("add the selected pathway to the \"Available Pathways\" list");
		addBtn.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				addBtnActionPerformed(evt);
			}
		});

		selectPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(
				javax.swing.BorderFactory
						.createTitledBorder("Please select pathways to merge"),
				"", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION,
				javax.swing.border.TitledBorder.DEFAULT_POSITION,
				new java.awt.Font("Tahoma", 0, 11), new java.awt.Color(0, 0,
						255))); // NOI18N

		availablePathwaysList
				.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
		availablePathwaysList.setLayoutOrientation(JList.VERTICAL);
		availablePathwaysList.setVisibleRowCount(8);

		availablePathwaysScrollPane.setViewportView(availablePathwaysList);

		selectedPathwaysList
				.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
		selectedPathwaysList.setLayoutOrientation(JList.VERTICAL);
		selectedPathwaysList.setVisibleRowCount(8);
		selectedPathwaysScrollPane.setViewportView(selectedPathwaysList);

		// rightButton.setIcon(new
		// javax.swing.ImageIcon("D:\\JAVA-CODE\\Superpathway\\images\\right16.gif"));
		// // NOI18N
		rightButton.setIcon(new javax.swing.ImageIcon(getClass().getResource(
				"/images/right16.gif")));

		rightButton.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				rightButtonActionPerformed(evt);
			}
		});

		// leftButton.setIcon(new
		// javax.swing.ImageIcon("D:\\JAVA-CODE\\Superpathway\\images\\left16.gif"));
		// // NOI18N
		leftButton.setIcon(new javax.swing.ImageIcon(getClass().getResource(
				"/images/left16.gif")));
		leftButton.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				leftButtonActionPerformed(evt);
			}
		});

		availablePathwaysLabel.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
		availablePathwaysLabel.setForeground(new java.awt.Color(102, 0, 0));
		availablePathwaysLabel.setText("Available Pathways");

		selectedPathwaysLabel.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
		selectedPathwaysLabel.setForeground(new java.awt.Color(102, 0, 0));
		selectedPathwaysLabel.setText("Selected Pathways");

		
		 org.jdesktop.layout.GroupLayout selectPanelLayout = new org.jdesktop.layout.GroupLayout(selectPanel);
	        selectPanel.setLayout(selectPanelLayout);
	        selectPanelLayout.setHorizontalGroup(
	            selectPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
	            .add(selectPanelLayout.createSequentialGroup()
	                .addContainerGap()
	                .add(selectPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
	                    .add(selectPanelLayout.createSequentialGroup()
	                        .add(availablePathwaysScrollPane, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 141, Short.MAX_VALUE)
	                        .add(18, 18, 18)
	                        .add(selectPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
	                            .add(rightButton, 0, 0, Short.MAX_VALUE)
	                            .add(leftButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 45, Short.MAX_VALUE))
	                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED))
	                    .add(selectPanelLayout.createSequentialGroup()
	                        .add(availablePathwaysLabel)
	                        .add(109, 109, 109)))
	                .add(selectPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
	                    .add(selectedPathwaysScrollPane, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 141, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
	                    .add(selectedPathwaysLabel))
	                .addContainerGap())
	        );

	        selectPanelLayout.linkSize(new java.awt.Component[] {availablePathwaysScrollPane, selectedPathwaysScrollPane}, org.jdesktop.layout.GroupLayout.HORIZONTAL);

	        selectPanelLayout.setVerticalGroup(
	            selectPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
	            .add(selectPanelLayout.createSequentialGroup()
	                .add(selectPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
	                    .add(org.jdesktop.layout.GroupLayout.TRAILING, selectPanelLayout.createSequentialGroup()
	                        .add(selectPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
	                            .add(availablePathwaysLabel)
	                            .add(selectedPathwaysLabel))
	                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
	                        .add(selectPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
	                            .add(selectPanelLayout.createSequentialGroup()
	                                .add(availablePathwaysScrollPane, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
	                                .add(24, 24, 24))
	                            .add(selectedPathwaysScrollPane)))
	                    .add(org.jdesktop.layout.GroupLayout.TRAILING, selectPanelLayout.createSequentialGroup()
	                        .add(rightButton)
	                        .add(18, 18, 18)
	                        .add(leftButton)
	                        .add(49, 49, 49)))
	                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
	        );

	        selectPanelLayout.linkSize(new java.awt.Component[] {availablePathwaysScrollPane, selectedPathwaysScrollPane}, org.jdesktop.layout.GroupLayout.VERTICAL);
		
        
		openBtn.setText("Open");
		openBtn.setToolTipText("load the selected pathway to Cytoscape");
		openBtn.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				openBtnActionPerformed(evt);
			}
		});

		CancelBtn.setText("Cancel");
		CancelBtn.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				CancelBtnActionPerformed(evt);
			}
		});

		MergeBtn.setText("Merge");
		MergeBtn.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				MergeBtnActionPerformed(evt);
			}
		});

		helpButton.setText("Help");
		helpButton.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				helpButtonActionPerformed(evt);
			}
		});

		
		
		 org.jdesktop.layout.GroupLayout searchPaneLayout = new org.jdesktop.layout.GroupLayout(searchPane);
	        searchPane.setLayout(searchPaneLayout);
	        searchPaneLayout.setHorizontalGroup(
	            searchPaneLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
	            .add(searchPaneLayout.createSequentialGroup()
	                .addContainerGap()
	                .add(stepLabel1)
	                .addContainerGap(67, Short.MAX_VALUE))
	            .add(searchPaneLayout.createSequentialGroup()
	                .addContainerGap()
	                .add(searchText, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 167, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
	                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
	                .add(organismCombo, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 148, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
	                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
	                .add(searchBtn)
	                .addContainerGap(22, Short.MAX_VALUE))
	            .add(searchPaneLayout.createSequentialGroup()
	                .addContainerGap()
	                .add(resultScrolllPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 399, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
	                .addContainerGap(19, Short.MAX_VALUE))
	            .add(org.jdesktop.layout.GroupLayout.TRAILING, searchPaneLayout.createSequentialGroup()
	                .add(searchPaneLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
	                    .add(searchPaneLayout.createSequentialGroup()
	                        .addContainerGap()
	                        .add(helpButton)
	                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
	                        .add(CancelBtn)
	                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
	                        .add(MergeBtn))
	                    .add(searchPaneLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
	                        .add(searchPaneLayout.createSequentialGroup()
	                            .addContainerGap()
	                            .add(openBtn)
	                            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
	                            .add(addBtn))
	                        .add(searchPaneLayout.createSequentialGroup()
	                            .add(19, 19, 19)
	                            .add(selectPanel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
	                .add(39, 39, 39))
	            .add(searchPaneLayout.createSequentialGroup()
	                .addContainerGap()
	                .add(hintLabel1)
	                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
	        );

	        searchPaneLayout.linkSize(new java.awt.Component[] {addBtn, openBtn}, org.jdesktop.layout.GroupLayout.HORIZONTAL);

	        searchPaneLayout.linkSize(new java.awt.Component[] {CancelBtn, MergeBtn, helpButton}, org.jdesktop.layout.GroupLayout.HORIZONTAL);

	        searchPaneLayout.setVerticalGroup(
	            searchPaneLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
	            .add(searchPaneLayout.createSequentialGroup()
	                .add(28, 28, 28)
	                .add(stepLabel1)
	                .add(18, 18, 18)
	                .add(hintLabel1)
	                .add(32, 32, 32)
	                .add(searchPaneLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
	                    .add(searchText, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
	                    .add(organismCombo, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
	                    .add(searchBtn))
	                .add(18, 18, 18)
	                .add(resultScrolllPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 176, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
	                .add(18, 18, 18)
	                .add(searchPaneLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
	                    .add(openBtn)
	                    .add(addBtn))
	                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
	                .add(selectPanel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 194, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
	                .add(39, 39, 39)
	                .add(searchPaneLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
	                    .add(CancelBtn)
	                    .add(MergeBtn)
	                    .add(helpButton))
	                .addContainerGap(43, Short.MAX_VALUE))
	        );

	        searchPaneLayout.linkSize(new java.awt.Component[] {addBtn, openBtn}, org.jdesktop.layout.GroupLayout.VERTICAL);

	        searchPaneLayout.linkSize(new java.awt.Component[] {searchBtn, searchText}, org.jdesktop.layout.GroupLayout.VERTICAL);

	        searchPaneLayout.linkSize(new java.awt.Component[] {CancelBtn, MergeBtn, helpButton}, org.jdesktop.layout.GroupLayout.VERTICAL);
		superpathwayPanel
				.addTab("Search/Select", null, searchPane,
						"search and select pathways that you want to merge from Wiki Pahtways");

		stepLabel2.setFont(new java.awt.Font("Dialog", 1, 11)); // NOI18N
		stepLabel2.setForeground(new java.awt.Color(102, 0, 0));
		stepLabel2
				.setText("Step 2: Select  a pathway for which you want to group nodes");

		jRadioButton1.setText("name of pathway 1");

		jRadioButton2.setText("name of pathway 2");

		jRadioButton3.setText("name of pathway 3");

		jRadioButton4.setText("name of pathway 4");

		jRadioButton5.setText("name of pathway 5");

		jRadioButton6.setText("name of pathway 6");

		
		org.jdesktop.layout.GroupLayout layoutPaneLayout = new org.jdesktop.layout.GroupLayout(layoutPane);
        layoutPane.setLayout(layoutPaneLayout);
        layoutPaneLayout.setHorizontalGroup(
            layoutPaneLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layoutPaneLayout.createSequentialGroup()
                .add(layoutPaneLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layoutPaneLayout.createSequentialGroup()
                        .addContainerGap()
                        .add(stepLabel2))
                    .add(layoutPaneLayout.createSequentialGroup()
                        .add(67, 67, 67)
                        .add(layoutPaneLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jRadioButton2)
                            .add(jRadioButton1)
                            .add(jRadioButton3)
                            .add(jRadioButton4)
                            .add(jRadioButton5)
                            .add(jRadioButton6))))
                .addContainerGap(87, Short.MAX_VALUE))
        );

        layoutPaneLayout.linkSize(new java.awt.Component[] {jRadioButton1, jRadioButton2, jRadioButton3, jRadioButton4, jRadioButton5, jRadioButton6}, org.jdesktop.layout.GroupLayout.HORIZONTAL);

        layoutPaneLayout.setVerticalGroup(
            layoutPaneLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layoutPaneLayout.createSequentialGroup()
                .add(31, 31, 31)
                .add(stepLabel2)
                .add(35, 35, 35)
                .add(jRadioButton1)
                .add(18, 18, 18)
                .add(jRadioButton2)
                .add(18, 18, 18)
                .add(jRadioButton3)
                .add(18, 18, 18)
                .add(jRadioButton4)
                .add(18, 18, 18)
                .add(jRadioButton5)
                .add(18, 18, 18)
                .add(jRadioButton6)
                .addContainerGap(362, Short.MAX_VALUE))
        );

        layoutPaneLayout.linkSize(new java.awt.Component[] {jRadioButton1, jRadioButton2, jRadioButton3, jRadioButton4, jRadioButton5, jRadioButton6}, org.jdesktop.layout.GroupLayout.VERTICAL);

		superpathwayPanel.addTab("Custom Layout", null, layoutPane,
				"create a custom layout grouping nodes from the same pathway");

		superpathwayPanel.addTab("Custom Layout", null, layoutPane,
				"create a custom layout grouping nodes from the same pathway");

		anchorPathwayLabel.setForeground(new java.awt.Color(0, 0, 255));
		anchorPathwayLabel.setText("Pathway");

		sharingNodeNoLabel.setForeground(new java.awt.Color(0, 0, 255));
		sharingNodeNoLabel.setText("Sharing Node Number");

		// anchorPathwayComboBox.setModel(new
		// javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2",
		// "Item 3", "Item 4" }));
		// anchorPathwayComboBox.setModel(new
		// DefaultComboBoxModel(mAvailablePathwaysNameIDList.toArray()));

		lowerBoundSharingNodeNoComboBox
				.setModel(new javax.swing.DefaultComboBoxModel(new String[] {
						"1", "2", "3", "4", "5", "6", "7", "8", "9", "10" }));

		// candidatePathwaysSharingNodesTable.setModel();

		explainHelpLabel1.setFont(new java.awt.Font("Dialog", 1, 11)); // NOI18N
		explainHelpLabel1.setForeground(new java.awt.Color(102, 0, 0));
		explainHelpLabel1
				.setText("Choose a pathway and set the range of sharing nodes number, a list of ");

		addHelpButton.setText("Add");
		addHelpButton
				.setToolTipText("add the selected pathways to the 'Available Pathways' list");
		addHelpButton.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				addHelpButtonActionPerformed(evt);
			}
		});

		lowerBoundLabel.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
		lowerBoundLabel.setText("from");

		upperBoundLabel.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
		upperBoundLabel.setText("to");

		upperBoundSharingNodeNoComboBox
				.setModel(new javax.swing.DefaultComboBoxModel(new String[] {
						"2", "3", "4", "5", "6", "7", "8", "9", "10", "11",
						"12", "13", "14", "15", "16", "17", "18", "19", "20" }));

		explainHelpLabel2.setFont(new java.awt.Font("Dialog", 1, 11)); // NOI18N
		explainHelpLabel2.setForeground(new java.awt.Color(102, 0, 0));
		explainHelpLabel2
				.setText("candidate pathways with sharing nodes would be returned.");

		backToSearchButton.setText("Back to Search");
		backToSearchButton
				.addActionListener(new java.awt.event.ActionListener() {
					public void actionPerformed(java.awt.event.ActionEvent evt) {
						backtoSearchButtonActionPerformed(evt);
					}
				});

		searchHelpButton.setText("Search");
		searchHelpButton.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				searchHelpButtonActionPerformed(evt);
			}
		});

		candidatePathwaysSharingNodesList.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
		candidatePathwaysSharingNodesScrollPane.setViewportView(candidatePathwaysSharingNodesList);
		//candidatePathwaysSharingNodesTable
	    //			.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
		
		/*candidatePathwaysSharingNodesTable.addMouseListener(new java.awt.event.MouseAdapter() {
			public void mouseClicked(java.awt.event.MouseEvent e) {
				if (e.getClickCount() == 1) {
					int row = candidatePathwaysSharingNodesTable.getSelectedRow();
					mSelectedInHelpPanel = tableModel.getRow(row);
					mSelectedPwInHelpPanel = mSelectedInHelpPanel
							.getProperty(ResultProperty.NAME)
							+ "("
							+ mSelectedInHelpPanel.getProperty(ResultProperty.ID)
							+ ")";

					System.out.println(mSelectedPwInHelpPanel);
					// openNetwork(mSelected);
				}
			}
		});*/
		
		// candidatePathwaysSharingNodesTable.setLayoutOrientation(JList.VERTICAL);
		// candidatePathwaysSharingNodesTable.setVisibleRowCount(8);
		//candidatePathwaysSharingNodesScrollPane
			//	.setViewportView(candidatePathwaysSharingNodesTable);

		
		org.jdesktop.layout.GroupLayout helpPaneLayout = new org.jdesktop.layout.GroupLayout(helpPanel);
		helpPanel.setLayout(helpPaneLayout);
        helpPaneLayout.setHorizontalGroup(
            helpPaneLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(helpPaneLayout.createSequentialGroup()
                .addContainerGap()
                .add(explainHelpLabel1)
                .addContainerGap(24, Short.MAX_VALUE))
            .add(helpPaneLayout.createSequentialGroup()
                .addContainerGap()
                .add(explainHelpLabel2)
                .addContainerGap(90, Short.MAX_VALUE))
            .add(helpPaneLayout.createSequentialGroup()
                .add(38, 38, 38)
                .add(helpPaneLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(candidatePathwaysSharingNodesScrollPane, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 364, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(helpPaneLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                        .add(helpPaneLayout.createSequentialGroup()
                            .add(backToSearchButton)
                            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                            .add(addHelpButton))
                        .add(helpPaneLayout.createSequentialGroup()
                            .add(helpPaneLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING, false)
                                .add(org.jdesktop.layout.GroupLayout.LEADING, helpPaneLayout.createSequentialGroup()
                                    .add(anchorPathwayLabel)
                                    .add(68, 68, 68)
                                    .add(anchorPathwayComboBox, 0, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .add(org.jdesktop.layout.GroupLayout.LEADING, helpPaneLayout.createSequentialGroup()
                                    .add(sharingNodeNoLabel)
                                    .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                                    .add(lowerBoundLabel)
                                    .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                                    .add(lowerBoundSharingNodeNoComboBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                                    .add(upperBoundLabel)
                                    .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                                    .add(upperBoundSharingNodeNoComboBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                            .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                            .add(searchHelpButton))))
                .addContainerGap(20, Short.MAX_VALUE))
        );

        helpPaneLayout.linkSize(new java.awt.Component[] {addHelpButton, backToSearchButton}, org.jdesktop.layout.GroupLayout.HORIZONTAL);

        helpPaneLayout.setVerticalGroup(
            helpPaneLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(helpPaneLayout.createSequentialGroup()
                .add(33, 33, 33)
                .add(explainHelpLabel1)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(explainHelpLabel2)
                .add(44, 44, 44)
                .add(helpPaneLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(anchorPathwayLabel)
                    .add(anchorPathwayComboBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(23, 23, 23)
                .add(helpPaneLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(sharingNodeNoLabel)
                    .add(lowerBoundLabel)
                    .add(lowerBoundSharingNodeNoComboBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(upperBoundLabel)
                    .add(upperBoundSharingNodeNoComboBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(searchHelpButton))
                .add(53, 53, 53)
                .add(candidatePathwaysSharingNodesScrollPane, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 251, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 81, Short.MAX_VALUE)
                .add(helpPaneLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(backToSearchButton)
                    .add(addHelpButton))
                .add(79, 79, 79))
        );

        helpPaneLayout.linkSize(new java.awt.Component[] {addHelpButton, backToSearchButton}, org.jdesktop.layout.GroupLayout.VERTICAL);

        helpPaneLayout.linkSize(new java.awt.Component[] {lowerBoundLabel, lowerBoundSharingNodeNoComboBox, searchHelpButton, upperBoundLabel, upperBoundSharingNodeNoComboBox}, org.jdesktop.layout.GroupLayout.VERTICAL);
		
		superpathwayPanel.addTab("Search Help", helpPanel);

		/*javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
		setLayout(layout);
		// getContentPane().setLayout(layout);
		layout.setHorizontalGroup(layout.createParallelGroup(
				javax.swing.GroupLayout.Alignment.LEADING).addGroup(
				layout.createSequentialGroup().addGap(22, 22, 22).addComponent(
						superpathwayPanel,
						javax.swing.GroupLayout.PREFERRED_SIZE, 431,
						javax.swing.GroupLayout.PREFERRED_SIZE)
						.addContainerGap(22, Short.MAX_VALUE)));
		layout.setVerticalGroup(layout.createParallelGroup(
				javax.swing.GroupLayout.Alignment.LEADING).addGroup(
				layout.createSequentialGroup().addGap(29, 29, 29).addComponent(
						superpathwayPanel,
						javax.swing.GroupLayout.PREFERRED_SIZE, 666,
						javax.swing.GroupLayout.PREFERRED_SIZE)
						.addContainerGap(20, Short.MAX_VALUE)));

		superpathwayPanel.getAccessibleContext().setAccessibleName(
				"search/select");*/
		
		org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(22, 22, 22)
                .add(superpathwayPanel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 433, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(21, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(superpathwayPanel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 699, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

		// pack();
	}// </editor-fold>

	private void searchTextActionPerformed(java.awt.event.ActionEvent evt) {
		searchActionPerformed(evt);
	}

	private void searchBtnActionPerformed(java.awt.event.ActionEvent evt) {
		searchActionPerformed(evt);
	}

	private void addBtnActionPerformed(java.awt.event.ActionEvent evt) {
		System.out.println(mClickedPathwayName);
		if (!availablePathwaysListModel.contains(mClickedPathwayName)) {
			availablePathwaysListModel.addElement(mClickedPathwayName);
			availablePathwaysList.setModel(availablePathwaysListModel);
			if (availablePathwaysListModel.getSize() > 0) {
				rightButton.setEnabled(true);
			}
			mAvailablePathwaysNameIDList.add(mClickedPathwayName);
			mAvailablePathwaysList.add(mSelected);
			anchorPathwayComboBox.setModel(new DefaultComboBoxModel(
					mAvailablePathwaysNameIDList.toArray()));
		}

	}

	private void openBtnActionPerformed(java.awt.event.ActionEvent evt) {
		System.out.println("After clicking open button!");
		System.out.println(mSelected.getProperty(ResultProperty.NAME));
		openNetwork(mSelected);
	}

	private void rightButtonActionPerformed(java.awt.event.ActionEvent evt) {

		// display the selected item of the available pathways list to the
		// selected pathways list
		mSelectedPathwayName = (String) availablePathwaysList
				.getSelectedValue();
		System.out.println("After clicking the right button!");
		System.out.println(mSelectedPathwayName);
		selectedPathwaysListModel.addElement((Object) mSelectedPathwayName);
		selectedPathwaysList.setModel(selectedPathwaysListModel);
		if (selectedPathwaysListModel.getSize() > 0) {
			leftButton.setEnabled(true);
		}

		// removed the selected item in the availabe pathways list
		int index = availablePathwaysList.getSelectedIndex();
		availablePathwaysListModel.remove(index);

		int size = availablePathwaysListModel.getSize();

		if (size == 0) { // No pathway is left, disable rightButton.
			rightButton.setEnabled(false);

		} else { // Select an index.
			if (index == size) {
				// removed item in last position
				index--;
			}

			availablePathwaysList.setSelectedIndex(index);
			availablePathwaysList.ensureIndexIsVisible(index);
		}

	}

	private void leftButtonActionPerformed(java.awt.event.ActionEvent evt) {
		// display the selected item of the selected pathways list to the
		// available pathways list
		mSelectedPathwayName = (String) selectedPathwaysList.getSelectedValue();
		System.out.println("After clicking the left button!");
		System.out.println(mSelectedPathwayName);
		availablePathwaysListModel.addElement((Object) mSelectedPathwayName);
		availablePathwaysList.setModel(availablePathwaysListModel);
		if (availablePathwaysListModel.getSize() > 0) {
			rightButton.setEnabled(true);
		}

		// removed the selected item in the selected pathways list
		int index = selectedPathwaysList.getSelectedIndex();
		selectedPathwaysListModel.remove(index);

		int size = selectedPathwaysListModel.getSize();

		if (size == 0) { // No pathway is left, disable rightButton.
			leftButton.setEnabled(false);

		} else { // Select an index.
			if (index == size) {
				// removed item in last position
				index--;
			}

			selectedPathwaysList.setSelectedIndex(index);
			selectedPathwaysList.ensureIndexIsVisible(index);
		}
	}

	private void CancelBtnActionPerformed(java.awt.event.ActionEvent evt) {
		SuperpathwaysPlugin spPlugin = SuperpathwaysPlugin.getInstance();
		spPlugin.mWindow.setVisible(false);
		spPlugin.mWindow.dispose();
	}

	private void MergeBtnActionPerformed(java.awt.event.ActionEvent evt) {
		//SuperpathwaysPlugin spPlugin = SuperpathwaysPlugin.getInstance();
		//spPlugin.mWindow.setVisible(false);
		//spPlugin.mWindow.dispose();
	}

	private void addHelpButtonActionPerformed(java.awt.event.ActionEvent evt) {
		
				
		mSelectedPathwayName = (String) candidatePathwaysSharingNodesList.getSelectedValue();
		int index1 = mSelectedPathwayName.indexOf(",");
		String pwNameId = mSelectedPathwayName.substring(0, index1);

		System.out
				.println("After clicking the Add button in the 'Search Help' panel!");
		System.out.println(pwNameId);

		availablePathwaysListModel.addElement((Object) pwNameId);
		availablePathwaysList.setModel(availablePathwaysListModel);
		/*
		 * if (availablePathwaysListModel.getSize() > 0) {
		 * rightButton.setEnabled(true); }
		 */

		// removed the selected item in the selected pathways list
		//int index = candidatePathwaysSharingNodesTable.getSelectedRow();
        //candidatePathwaysSharingNodesTableModel.removeRow(index);
        //candidatePathwaysSharingNodesTable.setModel(candidatePathwaysSharingNodesTableModel);
		int index = candidatePathwaysSharingNodesList.getSelectedIndex();
		candidatePathwaysSharingNodesListModel.remove(index);
		candidatePathwaysSharingNodesList.setModel(candidatePathwaysSharingNodesListModel);
		superpathwayPanel.setSelectedIndex(0);
		
	}

	private void searchHelpButtonActionPerformed(java.awt.event.ActionEvent evt) {

		candidatePathwaysSharingNodesTableModel = new DefaultTableModel();
		setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));

		String anchorPwNameAndId = anchorPathwayComboBox.getSelectedItem()
				.toString();
		int lowerBound = Integer.parseInt(lowerBoundSharingNodeNoComboBox
				.getSelectedItem().toString());
		int upperBound = Integer.parseInt(upperBoundSharingNodeNoComboBox
				.getSelectedItem().toString());
		mCandidatePwList = findCandidatePwBySharingNodes(anchorPwNameAndId,
				lowerBound, upperBound);

		// mCandidatePwList is a list of string with elements in format "Pathway
		// Name (pw id), sharing node number: a int"
		Iterator<String> it = mCandidatePwList.iterator();
		while (it.hasNext()) {
			String temp = it.next();
			candidatePathwaysSharingNodesListModel.addElement(temp);
			/*int index = temp.indexOf(",");
			String temp1 = temp.substring(0, index);
			String temp2 = temp.substring(index + 1);
			Object[] row=new Object[2];
			row[0]=(Object)temp1;
			row[1]=(Object)temp2;
			candidatePathwaysSharingNodesTableModel.addRow(row);*/
		}
		//candidatePathwaysSharingNodesTable.setModel(candidatePathwaysSharingNodesTableModel);
		candidatePathwaysSharingNodesList.setModel(candidatePathwaysSharingNodesListModel);
		setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
	}

	private void backtoSearchButtonActionPerformed(
			java.awt.event.ActionEvent evt) {
		// System.out.println("Clicking the back to search button!");
		superpathwayPanel.setSelectedIndex(0);
	}

	private void helpButtonActionPerformed(java.awt.event.ActionEvent evt) {
		superpathwayPanel.setSelectedIndex(2);
	}

	// the code above is generated in Netbean IDE

	protected void resetOrganisms() {
		List<String> organisms = new ArrayList<String>();
		organisms.add(ORGANISM_ALL);
		try {
			organisms.addAll(Arrays.asList(mClient.listOrganisms()));
		} catch (Exception e) {
			Logger.log.error("Unable to get organisms for WikiPathways client",
					e);
		}

		organismCombo.setModel(new DefaultComboBoxModel(organisms.toArray()));
	}

	public void searchActionPerformed(java.awt.event.ActionEvent evt) {
		// String action = e.getActionCommand();
		// if(ACTION_SEARCH.equals(action)) {
		FindPathwaysByTextParameters request = new FindPathwaysByTextParameters();
		request.query = searchText.getText();
		String org = organismCombo.getSelectedItem().toString();
		if (!ORGANISM_ALL.equals(org)) {
			request.species = Organism.fromLatinName(org);
		}
		try {
			WebServiceClientManager
					.getCyWebServiceEventSupport()
					.fireCyWebServiceEvent(
							new CyWebServiceEvent<FindPathwaysByTextParameters>(
									mClient.getClientID(),
									WSEventType.SEARCH_DATABASE, request));

		} catch (CyWebServiceException ex) {
			switch (ex.getErrorCode()) {
			case NO_RESULT:
				JOptionPane.showMessageDialog(this,
						"The search didn't return any results", "No results",
						JOptionPane.INFORMATION_MESSAGE);
				break;
			case OPERATION_NOT_SUPPORTED:
			case REMOTE_EXEC_FAILED:
				JOptionPane.showMessageDialog(this, "Error: "
						+ ex.getErrorCode() + ". See log for details", "Error",
						JOptionPane.ERROR_MESSAGE);
				break;
			}
			ex.printStackTrace();
		}
		// }
	}

	private void openNetwork(ResultRow mSelected) {
		try {
			GetPathwayParameters request = new GetPathwayParameters();
			WSSearchResult result = mSelected.getResult();
			request.id = result.getId();
			request.revision = Integer.parseInt(result.getRevision());
			WebServiceClientManager.getCyWebServiceEventSupport()
					.fireCyWebServiceEvent(
							new CyWebServiceEvent(mClient.getClientID(),
									WSEventType.IMPORT_NETWORK, request));
		} catch (CyWebServiceException ex) {
			JOptionPane.showMessageDialog(SuperpathwaysGui.this, "Error: "
					+ ex.getErrorCode() + ". See error log for details",
					"Error", JOptionPane.ERROR_MESSAGE);
		}
	}

	public void setResults(WSSearchResult[] results) {

		tableModel = new ListWithPropertiesTableModel<ResultProperty, ResultRow>();
		if (results != null) {
			tableModel.setColumns(new ResultProperty[] { ResultProperty.NAME,
					ResultProperty.ID, ResultProperty.ORGANISM, });

			resultTable.setModel(tableModel);
			for (WSSearchResult r : results) {
				tableModel.addRow(new ResultRow(r));
			}
		}
		resultTable.setModel(tableModel);
		System.out.println("Superpathways!");

	}

	public List<String> findCandidatePwBySharingNodes(String pwNameAndId,
			int lowerBound, int upperBound) {

		List<String> candidatePw = new ArrayList<String>();
		if (lowerBound > upperBound) {
			JOptionPane.showMessageDialog(helpPanel,
					"Please reset the range of sharing nodes number!");
		} else {

			Map<String, Integer> sharingNodeNumberofPws = new HashMap<String, Integer>();
			List<String> geneIDList = new ArrayList<String>();
			int geneNodeNumber = 0;
			// find the anchorResultRow for loading the pathway to Cytoscape
			// int indexAnchorPw =
			// mAvailablePathwaysNameIDList.indexOf(pwNameAndId);
			// ResultRow anchorResultRow =
			// mAvailablePathwaysList.get(indexAnchorPw);
			// openNetwork(anchorResultRow);

			JOptionPane
					.showMessageDialog(helpPanel,
							"Please wait with patience, the searching process takes time!");
			int index1 = pwNameAndId.indexOf("(");
			int index2 = pwNameAndId.indexOf(")");
			String pwsID = pwNameAndId.substring(index1 + 1, index2);

			// Create a client to the WikiPathways web service
			WikiPathwaysClient client = mClient.getStub();

			// Download a pathway from WikiPathways
			WSPathway wsPathway = new WSPathway();
			try {
				wsPathway = client.getPathway(pwsID);
			} catch (RemoteException e) {
				Logger.log.error(
						"Unable to get the pathway due to the RemoteException",
						e);
			} catch (ConverterException e) {
				Logger.log
						.error(
								"Unable to get the pathway due to the ConverterException",
								e);
			}
			// Create a pathway object
			Pathway pathway = new Pathway();
			try {
				pathway = WikiPathwaysClient.toPathway(wsPathway);
			} catch (ConverterException e) {
				Logger.log.error(
						"Unable to get the pathway due to the RemoteException",
						e);
			}
			// Get all genes, proteins and metabolites for a pathway
			for (PathwayElement pwElm : pathway.getDataObjects()) {
				// Only take elements with type DATANODE (genes, proteins,
				// metabolites)
				if (pwElm.getObjectType() == ObjectType.DATANODE) {
					/*
					 * System.out.println(pwElm.getXref().toString()); try {
					 * WSSearchResult[] PwsSharingNode = client
					 * .findPathwaysByXref(pwElm.getXref());
					 * System.out.println("" + PwsSharingNode.length);
					 * 
					 * mNodeIdToPwsSharingNode.put(pwElm.getXref().toString(),
					 * PwsSharingNode); } catch (RemoteException e) { Logger.log
					 * .error( "Unable to find the candidate pathways due to the
					 * RemoteException", e); }
					 */

					System.out.println(pwElm.getGeneID());
					geneIDList.add(pwElm.getGeneID());
					geneNodeNumber = geneNodeNumber + 1;
					try {
						WSSearchResult[] PwsSharingNode = client
								.findPathwaysByXref(pwElm.getGeneID());
						System.out.println("" + PwsSharingNode.length);

						mNodeIdToPwsSharingNode.put(pwElm.getGeneID(),
								PwsSharingNode);
					} catch (RemoteException e) {
						Logger.log
								.error(
										"Unable to find the candidate pathways due to the RemoteException",
										e);
					}
				}

			}

			for (int i = 0; i < geneNodeNumber; i++) {
				WSSearchResult[] pwsArray = mNodeIdToPwsSharingNode
						.get(geneIDList.get(i));

				for (int j = 0; j < pwsArray.length; j++) {
					WSSearchResult pw = pwsArray[j];
					ResultRow pwResultRow = new ResultRow(pw);
					String onePwNameAndId = pwResultRow
							.getProperty(ResultProperty.NAME)
							+ "("
							+ pwResultRow.getProperty(ResultProperty.ID)
							+ ")";

					if (sharingNodeNumberofPws.containsKey(onePwNameAndId)) {
						Integer oldValue = sharingNodeNumberofPws
								.get(onePwNameAndId);
						Integer newValue = new Integer(oldValue + 1);
						sharingNodeNumberofPws.put(onePwNameAndId, newValue);
					} else {
						sharingNodeNumberofPws.put(onePwNameAndId, 1);
					}
				}
			}

			// the following code is for displaying the result in the table of
			// "Search Help" panel
			Set<String> sharingNodePwsSet = sharingNodeNumberofPws.keySet();
			Iterator<String> it = sharingNodePwsSet.iterator();
			while (it.hasNext()) {
				String temp = it.next();
				Integer value = sharingNodeNumberofPws.get(temp);
				if (value >= lowerBound && value <= upperBound) {
					candidatePw.add(temp + ", sharing node number: "
							+ String.valueOf(value));
				}
			}

		}
		return candidatePw;
	}

	private javax.swing.DefaultListModel availablePathwaysListModel;

	private javax.swing.DefaultListModel selectedPathwaysListModel;

	 private javax.swing.DefaultListModel candidatePathwaysSharingNodesListModel;

	private javax.swing.table.DefaultTableModel candidatePathwaysSharingNodesTableModel;

	private javax.swing.JButton CancelBtn;

	private javax.swing.JButton MergeBtn;

	private javax.swing.JButton addBtn;

	private javax.swing.JButton addHelpButton;

	private javax.swing.JComboBox anchorPathwayComboBox;

	private javax.swing.JLabel anchorPathwayLabel;

	private javax.swing.JLabel availablePathwaysLabel;

	private javax.swing.JList availablePathwaysList;

	private javax.swing.JScrollPane availablePathwaysScrollPane;

	private javax.swing.JButton backToSearchButton;

	private javax.swing.JScrollPane candidatePathwaysSharingNodesScrollPane;

	// private javax.swing.JList candidatePathwaysSharingNodesList;

	private javax.swing.JLabel explainHelpLabel1;

	private javax.swing.JLabel explainHelpLabel2;

	private javax.swing.JPanel helpPanel;

	private javax.swing.JLabel hintLabel1;

	private javax.swing.JRadioButton jRadioButton1;

	private javax.swing.JRadioButton jRadioButton2;

	private javax.swing.JRadioButton jRadioButton3;

	private javax.swing.JRadioButton jRadioButton4;

	private javax.swing.JRadioButton jRadioButton5;

	private javax.swing.JRadioButton jRadioButton6;

	private javax.swing.JPanel layoutPane;

	private javax.swing.JButton leftButton;

	private javax.swing.JLabel lowerBoundLabel;

	private javax.swing.JComboBox lowerBoundSharingNodeNoComboBox;

	private javax.swing.JButton openBtn;

	private javax.swing.JComboBox organismCombo;

	private javax.swing.JScrollPane resultScrolllPane1;

	private javax.swing.JTable resultTable;

	private javax.swing.JButton rightButton;

	private javax.swing.JButton searchBtn;

	private javax.swing.JPanel searchPane;

	private javax.swing.JTextField searchText;

	private javax.swing.JPanel selectPanel;

	private javax.swing.JLabel selectedPathwaysLabel;

	private javax.swing.JList selectedPathwaysList;

	private javax.swing.JScrollPane selectedPathwaysScrollPane;

	private javax.swing.JLabel sharingNodeNoLabel;

	private javax.swing.JLabel stepLabel1;

	private javax.swing.JLabel stepLabel2;

	private javax.swing.JTabbedPane superpathwayPanel;

	private javax.swing.JLabel upperBoundLabel;

	private javax.swing.JComboBox upperBoundSharingNodeNoComboBox;

	private javax.swing.JButton searchHelpButton;

	private javax.swing.JButton helpButton;

	//private javax.swing.JTable candidatePathwaysSharingNodesTable;
	
	private javax.swing.JList candidatePathwaysSharingNodesList;

	// End of variables declaration
	ListWithPropertiesTableModel<ResultProperty, ResultRow> tableModel;

	class ResultRow implements RowWithProperties<ResultProperty> {
		WSSearchResult result;

		public ResultRow(WSSearchResult result) {
			this.result = result;
		}

		public WSSearchResult getResult() {
			return result;
		}

		public String getProperty(ResultProperty prop) {
			switch (prop) {
			case NAME:
				return result.getName();
			case ORGANISM:
				return result.getSpecies();
			case SCORE:
				return Double.toString(result.getScore());
			case URL:
				return result.getUrl();
				// helen add
			case ID:
				return result.getId();
			}
			return null;
		}
	}

}